logo:
    dw 0x0781, 0xe000, 0x0000, 0x3ffe
    dw 0x0781, 0xe000, 0x0000, 0xffff
    dw 0x0781, 0xe000, 0xfc00, 0xffff
    dw 0x0fc3, 0xf003, 0xff01, 0xf003
    dw 0x0fc3, 0xf007, 0xff81, 0xc000
    dw 0x0fc3, 0xf00f, 0x87c1, 0xc000
    dw 0x1fe7, 0xf81e, 0x01e1, 0xc000
    dw 0x1fe7, 0xf83c, 0x00f1, 0xfc00
    dw 0x1fe7, 0xf878, 0x0078, 0xfffe
    dw 0x3cff, 0x3c78, 0x0078, 0xfffe
    dw 0x3cff, 0x3c3c, 0x00f0, 0x007f
    dw 0x3cff, 0x3c1e, 0x01e0, 0x0007
    dw 0x787e, 0x1e0f, 0x87c0, 0x0007
    dw 0x787e, 0x1e07, 0xff80, 0x0007
    dw 0x787e, 0x1e03, 0xff01, 0x801f
    dw 0xf03c, 0x0f00, 0xfc01, 0xfffe
    dw 0xf03c, 0x0f00, 0x0001, 0xfffe
    dw 0xf000, 0x0f00, 0x0000, 0xfff8

drawLogo:
    pusha

    ; ah = Colors Byte
    ; al = solid rectangle
    mov al, 0xdb
 
    mov si, logo
    mov di, ((LOGO_TOP_MARGIN * TEXT_COLS) + LOGO_LEFT_MARGIN) * TEXT_CHARSIZE

    mov cx, LOGO_ROWS
  .rowLoop:
    push cx
    mov cx, LOGO_COLS / LOGO_COLS_PER_BLOCK
  .blockLoop:
    mov bx, [si]
    push cx
    mov cx, LOGO_COLS_PER_BLOCK
  .charLoop:
    test bh, 0x80
    jz .afterPrint
    mov [es:di], ax
  .afterPrint:
    rol bx, 1
    times TEXT_CHARSIZE inc di
    loop .charLoop
    times (LOGO_COLS_PER_BLOCK / 8) inc si
    pop cx
    loop .blockLoop
    add di, (LOGO_RIGHT_MARGIN + LOGO_LEFT_MARGIN) * TEXT_CHARSIZE
    pop cx
    loop .rowLoop

    popa
    ret
